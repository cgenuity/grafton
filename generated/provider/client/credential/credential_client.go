package credential

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new credential API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for credential API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCredentialsID deprovisions

Manifold calls this endpoint to request the deprovisioning the
specified set of Credentials.

When a Resource is deprovisioned, Manifold assumes that *all*
associated Credentials are deprovisioned by the provider as well.

If the credentials have already been deprovisioned, then the provider
must return a 404 response.

**Request Timeout**

If the request takes longer than 60 seconds, then it is assumed to have
failed. Manifold will retry the request again in the future.

**Callback Timeout**

If a `202 Accepted` response is returned, Manifold will expect the
provider to complete the deprovision flow by calling the callback url
within 24 hours. If the callback is not invoked, Manifold will retry
the request again.

If the deprovision was successful, then a `404 Not Found` response
should be returned to Manifold.

*/
func (a *Client) DeleteCredentialsID(params *DeleteCredentialsIDParams) (*DeleteCredentialsIDAccepted, *DeleteCredentialsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCredentialsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteCredentialsID",
		Method:             "DELETE",
		PathPattern:        "/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCredentialsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCredentialsIDAccepted:
		return value, nil, nil
	case *DeleteCredentialsIDNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PutCredentialsID provisions

Manifold calls this endpoint to request the provisioning of a set of
Credentials for the specified Resource. This route must support being
called more than once with the same payload.

The `id` property is the unique identifier Manifold will map to
the returned set of Credentials. Use this value for mapping Manifold
Credentials to data inside your system.

The `resource_id` property is the unique identifier for the
Resource the requested set of Credentials grant access to.

The provider can return multiple key-value pairs that represent this
set of Credentials. However, if a url form exists (e.g.
`postgres://user:pw@host:5432/db`), please provide the credentials in
that form.

**Request Timeout**

If the request takes longer than 60 seconds, then it is assumed to have
failed. Manifold will retry the request again in the future.

**Callback Timeout**

If a `202 Accepted` response is returned, Manifold will expect the
provider to complete the provision flow by calling the callback url
within 24 hours. If the callback is not invoked, Manifold will retry
the request again.

If the credentials have been provisioned successfully with properties
that match the request, then the provider should return a `201 Created`
response. However, if provisioning failed, a corresponding error should
be returned.

*/
func (a *Client) PutCredentialsID(params *PutCredentialsIDParams) (*PutCredentialsIDCreated, *PutCredentialsIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCredentialsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCredentialsID",
		Method:             "PUT",
		PathPattern:        "/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutCredentialsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutCredentialsIDCreated:
		return value, nil, nil
	case *PutCredentialsIDAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
