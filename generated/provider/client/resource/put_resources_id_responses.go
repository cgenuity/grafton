package resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// PutResourcesIDReader is a Reader for the PutResourcesID structure.
type PutResourcesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutResourcesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPutResourcesIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewPutResourcesIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewPutResourcesIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutResourcesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutResourcesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPutResourcesIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutResourcesIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutResourcesIDCreated creates a PutResourcesIDCreated with default headers values
func NewPutResourcesIDCreated() *PutResourcesIDCreated {
	return &PutResourcesIDCreated{}
}

/*PutResourcesIDCreated handles this case with default header values.

Successful provisioning request, with an attached message to be
displayed to the user.

*/
type PutResourcesIDCreated struct {
	Payload PutResourcesIDCreatedBody
}

func (o *PutResourcesIDCreated) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] putResourcesIdCreated  %+v", 201, o.Payload)
}

func (o *PutResourcesIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResourcesIDAccepted creates a PutResourcesIDAccepted with default headers values
func NewPutResourcesIDAccepted() *PutResourcesIDAccepted {
	return &PutResourcesIDAccepted{}
}

/*PutResourcesIDAccepted handles this case with default header values.

Acknowledgement of the provisioning request with a corresponding
message to be displayed to the user. The provider will call the
callback url once provisioning has succeed or a failure has
occurred.

*/
type PutResourcesIDAccepted struct {
	Payload PutResourcesIDAcceptedBody
}

func (o *PutResourcesIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] putResourcesIdAccepted  %+v", 202, o.Payload)
}

func (o *PutResourcesIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResourcesIDNoContent creates a PutResourcesIDNoContent with default headers values
func NewPutResourcesIDNoContent() *PutResourcesIDNoContent {
	return &PutResourcesIDNoContent{}
}

/*PutResourcesIDNoContent handles this case with default header values.

Successful provisioning request, with no message to be
displayed to the user.

*/
type PutResourcesIDNoContent struct {
}

func (o *PutResourcesIDNoContent) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] putResourcesIdNoContent ", 204)
}

func (o *PutResourcesIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutResourcesIDBadRequest creates a PutResourcesIDBadRequest with default headers values
func NewPutResourcesIDBadRequest() *PutResourcesIDBadRequest {
	return &PutResourcesIDBadRequest{}
}

/*PutResourcesIDBadRequest handles this case with default header values.

Request denied due to invalid request body.
*/
type PutResourcesIDBadRequest struct {
	Payload PutResourcesIDBadRequestBody
}

func (o *PutResourcesIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] putResourcesIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutResourcesIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResourcesIDUnauthorized creates a PutResourcesIDUnauthorized with default headers values
func NewPutResourcesIDUnauthorized() *PutResourcesIDUnauthorized {
	return &PutResourcesIDUnauthorized{}
}

/*PutResourcesIDUnauthorized handles this case with default header values.

Request authenticity could not be validated.
*/
type PutResourcesIDUnauthorized struct {
	Payload PutResourcesIDUnauthorizedBody
}

func (o *PutResourcesIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] putResourcesIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutResourcesIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResourcesIDConflict creates a PutResourcesIDConflict with default headers values
func NewPutResourcesIDConflict() *PutResourcesIDConflict {
	return &PutResourcesIDConflict{}
}

/*PutResourcesIDConflict handles this case with default header values.

An entity already exists with that identifier and the request contents do
not match the current object. If an entity does exist with that
identifier and the request contents do match then a success response
should be returned.

*/
type PutResourcesIDConflict struct {
	Payload PutResourcesIDConflictBody
}

func (o *PutResourcesIDConflict) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] putResourcesIdConflict  %+v", 409, o.Payload)
}

func (o *PutResourcesIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutResourcesIDInternalServerError creates a PutResourcesIDInternalServerError with default headers values
func NewPutResourcesIDInternalServerError() *PutResourcesIDInternalServerError {
	return &PutResourcesIDInternalServerError{}
}

/*PutResourcesIDInternalServerError handles this case with default header values.

Request failed due to an internal server error.
*/
type PutResourcesIDInternalServerError struct {
	Payload PutResourcesIDInternalServerErrorBody
}

func (o *PutResourcesIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /resources/{id}][%d] putResourcesIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PutResourcesIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutResourcesIDAcceptedBody Object used to display a message back to the user after a change has been
// made to a Resource.
//
swagger:model PutResourcesIDAcceptedBody
*/
type PutResourcesIDAcceptedBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put resources ID accepted body
func (o *PutResourcesIDAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutResourcesIDAcceptedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putResourcesIdAccepted"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putResourcesIdAccepted"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putResourcesIdAccepted"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutResourcesIDBadRequestBody put resources ID bad request body
swagger:model PutResourcesIDBadRequestBody
*/
type PutResourcesIDBadRequestBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put resources ID bad request body
func (o *PutResourcesIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutResourcesIDBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putResourcesIdBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putResourcesIdBadRequest"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putResourcesIdBadRequest"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutResourcesIDConflictBody put resources ID conflict body
swagger:model PutResourcesIDConflictBody
*/
type PutResourcesIDConflictBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put resources ID conflict body
func (o *PutResourcesIDConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutResourcesIDConflictBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putResourcesIdConflict"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putResourcesIdConflict"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putResourcesIdConflict"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutResourcesIDCreatedBody Object used to display a message back to the user after a change has been
// made to a Resource.
//
swagger:model PutResourcesIDCreatedBody
*/
type PutResourcesIDCreatedBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put resources ID created body
func (o *PutResourcesIDCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutResourcesIDCreatedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putResourcesIdCreated"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putResourcesIdCreated"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putResourcesIdCreated"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutResourcesIDInternalServerErrorBody put resources ID internal server error body
swagger:model PutResourcesIDInternalServerErrorBody
*/
type PutResourcesIDInternalServerErrorBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put resources ID internal server error body
func (o *PutResourcesIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutResourcesIDInternalServerErrorBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putResourcesIdInternalServerError"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putResourcesIdInternalServerError"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putResourcesIdInternalServerError"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}

/*PutResourcesIDUnauthorizedBody put resources ID unauthorized body
swagger:model PutResourcesIDUnauthorizedBody
*/
type PutResourcesIDUnauthorizedBody struct {

	// message
	// Required: true
	// Max Length: 256
	// Min Length: 3
	Message *string `json:"message"`
}

// Validate validates this put resources ID unauthorized body
func (o *PutResourcesIDUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutResourcesIDUnauthorizedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putResourcesIdUnauthorized"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	if err := validate.MinLength("putResourcesIdUnauthorized"+"."+"message", "body", string(*o.Message), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("putResourcesIdUnauthorized"+"."+"message", "body", string(*o.Message), 256); err != nil {
		return err
	}

	return nil
}
